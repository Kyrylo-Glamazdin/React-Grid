{"version":3,"sources":["components/Col.js","components/Row.js","components/Grid.js","components/Controls.js","components/App.js","serviceWorker.js","index.js"],"names":["Col","props","style","backgroundColor","cellColor","className","onClick","setCellColor","indexr","indexc","color","onMouseDown","setActive","onMouseOver","activeColoring","activeDrawing","Row","this","cols","map","index","key","setInactive","Component","Grid","rows","onMouseLeave","onMouseUp","col","Controls","addRow","addCol","removeRow","removeCol","fillUncolored","fillAll","clear","chooseColor","onChange","default","hidden","App","state","bind","existingRows","length","newRow","push","i","setState","forEach","row","pop","j","target","value","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b6256d6.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Col.css';\n\n//the Col component represents an individual column inside the grid\nconst Col = (props) => {\n    return (\n        <div style={{ backgroundColor: props.cellColor }} className=\"individual-col\" onClick={function () { props.setCellColor(props.indexr, props.indexc, props.color) }} onMouseDown={function () { props.setActive() }} onMouseOver={function () { props.activeColoring(props.indexr, props.indexc, props.color, props.activeDrawing) }}>\n        </div>\n\n    );\n}\n\nexport default Col;","import React, {Component} from 'react';\nimport Col from './Col.js';\n\n//the Row component represents individual row inside the grid\nclass Row extends Component{\n    render() {\n        return(\n            <div className = \"individual-row\">\n            {this.props.cols.map((cellColor, index) => <Col\n                cellColor={cellColor}\n                key={index}\n                color={this.props.color}\n                indexc={index}\n                indexr={this.props.indexr}\n                setCellColor={this.props.setCellColor}\n                setActive={this.props.setActive}\n                activeColoring={this.props.activeColoring}\n                activeDrawing={this.props.activeDrawing}\n                setInactive={this.props.setInactive}\n            /> )}\n            </div>\n        );\n    }\n}\n\nexport default Row;","import React from 'react';\nimport Row from './Row.js';\nimport '../styles/Grid.css';\n\n//the Grid component represents the entire grid with all of the rows and columns\nconst Grid = ({ rows, color, setCellColor, setActive, activeColoring, activeDrawing, setInactive }) => {\n    \n    return(\n        <main className=\"main-grid\" onMouseLeave={function () { setInactive() }} onMouseUp={function () { setInactive() }}>\n            {rows.map((col, index) => (<Row key={index} cols={col} color={color} indexr={index} setCellColor={setCellColor} setActive={setActive} activeColoring={activeColoring} activeDrawing={activeDrawing}setInactive = {setInactive} />))}\n\n        </main>\n    )\n};\n\nexport default Grid;","import React from 'react';\nimport '../styles/Controls.css';\n\n//the controls section with all of the buttons to control the grid\nconst Controls = ({ addRow, addCol, removeRow, removeCol, fillUncolored, fillAll, clear, chooseColor }) => {\n    const colors = [\n        'Red',\n        'Blue',\n        'Green',\n        'Yellow',\n    ]\n    return (\n        <div className='controls'>\n            <button onClick={ addRow }>Add Row</button>\n            <button onClick={ addCol }>Add Col</button>\n            <button onClick={ removeRow }>Remove Row</button>\n            <button onClick={ removeCol }>Remove Col</button>\n            <button onClick={ fillUncolored }>Fill All Uncolored</button>\n            <button onClick={ fillAll }>Fill All</button>\n            <button onClick={ clear }>Clear</button>\n            <select onChange={ chooseColor }>\n                <option default hidden>Choose a color</option>\n                {\n                    colors.map(color => <option key={color}>{ color }</option> )\n                }\n            </select>\n        </div>\n    );\n};\n\nexport default Controls","import React, {Component} from 'react';\n\n// components\nimport Grid from \"./Grid.js\"\nimport Controls from './Controls';\n\n//the main component of the app. contains the functions for modifying the grid and the current state of the grid\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      rows: [], //rows of the grid\n      color: '#E9EEF7', //currently selected color \n      activeDrawing: false //indicates whether the drawing is active\n    };\n\n    //bindings\n    this.addRow = this.addRow.bind(this);\n    this.addCol = this.addCol.bind(this);\n    this.removeRow = this.removeRow.bind(this);\n    this.removeCol = this.removeCol.bind(this);\n    this.fillUncolored = this.fillUncolored.bind(this);\n    this.fillAll = this.fillAll.bind(this);\n    this.clear = this.clear.bind(this);\n    this.chooseColor = this.chooseColor.bind(this);\n    this.setCellColor = this.setCellColor.bind(this);\n    this.activeColoring = this.activeColoring.bind(this);\n    this.setActive = this.setActive.bind(this);\n    this.setInactive = this.setInactive.bind(this);\n  }\n\n  //adds a new row to the grid with the same number of columns as all other rows\n  addRow() {\n    let existingRows = this.state.rows;\n    //if the grid is empty, add a row with one column to it\n    if (existingRows.length === 0){\n      let newCol = \"#E9EEF7\";\n      let newRow = [];\n      newRow.push(newCol);\n      existingRows.push(newRow);\n    }\n    //if the grid contains other rows, add a new one with the same number of columns\n    else{\n      let newRow = [];\n      for (let i = 0; i < existingRows[0].length; i++){\n        let newCol = \"#E9EEF7\";\n        newRow.push(newCol);\n      }\n      existingRows.push(newRow);\n    }\n    this.setState({rows: existingRows}); //update the state with the new rows\n  }\n\n  //adds a new column to each row\n  addCol() {\n    const rows = [...this.state.rows];\n    //if the grid is empty, add a new row with one column in it\n    if (rows.length === 0){\n      let newRow = [];\n      let newCol = \"#E9EEF7\";\n      newRow.push(newCol);\n      rows.push(newRow);\n    }\n    //if grid is not empty, append a new column to each existing row\n    else{\n      rows.forEach(row => row.push(\"#E9EEF7\"));\n    }\n    this.setState({ rows });\n  };\n\n  //removes a row from the grid\n  removeRow() {\n    let {rows} = this.state;\n    rows.pop();\n    this.setState({rows});\n  }\n\n  //removes a column from the grid\n  removeCol() {\n    let {rows} = this.state;\n    for (let i = 0; i < rows.length; i++){\n      rows[i].pop();\n    }\n    if (!rows[0] || rows[0].length === 0){\n      this.setState({rows: []});\n    }\n    else{\n      this.setState({rows});\n    }\n  }\n\n  //fills all of the uncolored cells with the color that is currently selected\n  fillUncolored() {\n    let {rows} = this.state;\n    for (let i = 0; i < rows.length; i++){\n      for (let j = 0; j < rows[i].length; j++){\n        if (rows[i][j] === \"#E9EEF7\"){\n          rows[i][j] = this.state.color;\n        }\n      }\n    }\n    this.setState({rows});\n  }\n\n  //sets the color of each cell to the currently selected color\n  fillAll() {\n    let {rows} = this.state;\n    for (let i = 0; i < rows.length; i++){\n      for (let j = 0; j < rows[i].length; j++){\n        rows[i][j] = this.state.color;\n      }\n    }\n    this.setState({rows});\n  }\n\n  //sets the color of each set to standard\n  clear() {\n    let {rows} = this.state;\n    for (let i = 0; i < rows.length; i++){\n      for (let j = 0; j < rows[i].length; j++){\n        rows[i][j] = \"#E9EEF7\";\n      }\n    }\n    this.setState({rows});\n  }\n\n  chooseColor({ target }) {\n    const color = target.value.toLowerCase();\n    this.setState({ color });\n  }\n\n    setCellColor(i, j, color) {\n        const { rows } = this.state;\n        rows[i][j] !== \"#E9EEF7\" ? rows[i][j] = \"#E9EEF7\" : rows[i][j] = color;\n        this.setState({ rows });\n    }\n\n    activeColoring(i, j, color, activeDrawing) {\n        if (activeDrawing) {\n            const { rows } = this.state;\n            rows[i][j] = color;\n            this.setState({ rows });\n        }\n    }\n\n    setActive() {\n        let { activeDrawing } = this.state;\n        activeDrawing = true;\n        this.setState({ activeDrawing });\n    }\n\n    setInactive() {\n        let { activeDrawing } = this.state;\n        activeDrawing = false;\n        this.setState({ activeDrawing });\n    }\n\n  render(){\n    const { addRow, addCol, removeRow, removeCol, fillUncolored, fillAll, clear, chooseColor, setCellColor, activeColoring, setActive, setInactive } = this;\n    const { rows, color, activeDrawing } = this.state;\n    return(\n      <div>\n        <Controls \n          addRow={ addRow }\n          addCol={ addCol }\n          removeRow={ removeRow }\n          removeCol={ removeCol }\n          fillUncolored={ fillUncolored }\n          fillAll={ fillAll }\n          clear={ clear }\n          chooseColor={ chooseColor }\n        />\n\n        <Grid \n                rows={rows} color={color} setCellColor={setCellColor} activeColoring={activeColoring} setActive={setActive} activeDrawing={activeDrawing} setInactive={setInactive}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}